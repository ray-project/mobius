load("@com_github_ray_project_ray//bazel:ray.bzl", "define_java_module")
load("@com_github_ray_project_ray//bazel:ray.bzl", "native_java_binary")
load("@com_github_ray_project_ray//bazel:ray.bzl", "native_java_library")
load("@rules_proto_grpc//java:defs.bzl", "java_proto_compile")
load(
    "@com_github_johnynek_bazel_jar_jar//:jar_jar.bzl",
    "jar_jar",
)

exports_files([
    "testng.xml",
])

all_modules = [
    "streaming-common",
    "streaming-state",
    "streaming-api",
    "streaming-runtime",
]

java_import(
    name = "all_modules",
    jars = [
        "libio_ray_ray_" + module + ".jar"
        for module in all_modules
    ] + [
        "libio_ray_ray_" + module + "-src.jar"
        for module in all_modules
    ] + [
        "all_streaming_tests_deploy.jar",
        "all_streaming_tests_deploy-src.jar",
    ],
    deps = [
        ":io_ray_ray_" + module
        for module in all_modules
    ] + [
        ":all_streaming_tests",
    ],
)

define_java_module(
    name = "streaming-api",
    define_test_lib = True,
    test_deps = [
        ":io_ray_ray_streaming-common",
        ":io_ray_ray_streaming-state",
        ":io_ray_ray_streaming-api",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_slf4j_slf4j_api",
        "@maven//:org_testng_testng",
        "@maven//:org_yaml_snakeyaml",
        "@ray_streaming_maven//:org_ow2_asm_asm",
        "@ray_streaming_maven//:org_apache_commons_commons_lang3",
        "@ray_streaming_maven//:org_apache_arrow_arrow_vector",
        "@ray_streaming_maven//:de_ruedigermoeller_fst",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":io_ray_ray_streaming-common",
        ":io_ray_ray_streaming-state",
        "@com_github_ray_project_ray//java:io_ray_ray_api",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_slf4j_slf4j_api",
        "@ray_streaming_maven//:com_google_code_findbugs_jsr305",
        "@ray_streaming_maven//:com_google_code_gson_gson",
        "@ray_streaming_maven//:org_ow2_asm_asm",
        "@ray_streaming_maven//:org_apache_commons_commons_lang3",
        "@ray_streaming_maven//:org_apache_arrow_arrow_vector",
        "@ray_streaming_maven//:de_ruedigermoeller_fst",
    ],
)

define_java_module(
    name = "streaming-common",
    define_test_lib = True,
    test_deps = [
        ":io_ray_ray_streaming-common",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_slf4j_slf4j_api",
        "@maven//:org_testng_testng",
        "@ray_streaming_maven//:com_esotericsoftware_kryo",
        "@ray_streaming_maven//:com_esotericsoftware_minlog_minlog",
        "@ray_streaming_maven//:com_esotericsoftware_reflectasm_reflectasm",
        "@ray_streaming_maven//:com_typesafe_config",
        "@ray_streaming_maven//:de_ruedigermoeller_fst",
        "@ray_streaming_maven//:de_javakaffee_kryo_serializers",
        "@ray_streaming_maven//:org_apache_commons_commons_lang3",
        "@ray_streaming_maven//:joda_time_joda_time",
        "@ray_streaming_maven//:commons_io_commons_io",
        "@ray_streaming_maven//:net_java_dev_jna_jna",
        "@ray_streaming_maven//:org_objenesis_objenesis",
        ],
    visibility = ["//visibility:public"],
    deps = [
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_slf4j_slf4j_api",
        "@maven//:org_testng_testng",
        "@ray_streaming_maven//:com_esotericsoftware_kryo",
        "@ray_streaming_maven//:com_esotericsoftware_minlog_minlog",
        "@ray_streaming_maven//:com_esotericsoftware_reflectasm_reflectasm",
        "@ray_streaming_maven//:com_typesafe_config",
        "@ray_streaming_maven//:de_ruedigermoeller_fst",
        "@ray_streaming_maven//:de_javakaffee_kryo_serializers",
        "@ray_streaming_maven//:org_aeonbits_owner_owner",
        "@ray_streaming_maven//:org_apache_commons_commons_lang3",
        "@ray_streaming_maven//:joda_time_joda_time",
        "@ray_streaming_maven//:commons_io_commons_io",
        "@ray_streaming_maven//:net_java_dev_jna_jna",
        "@ray_streaming_maven//:org_objenesis_objenesis",
    ],
)

define_java_module(
    name = "streaming-state",
    define_test_lib = True,
    test_deps = [
        ":io_ray_ray_streaming-common",
        ":io_ray_ray_streaming-state",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_slf4j_slf4j_api",
        "@maven//:org_testng_testng",
        "@maven//:de_ruedigermoeller_fst",
        "@maven//:org_yaml_snakeyaml",
        "@ray_streaming_maven//:com_esotericsoftware_kryo",
        "@ray_streaming_maven//:com_esotericsoftware_minlog_minlog",
        "@ray_streaming_maven//:com_esotericsoftware_reflectasm_reflectasm",
        "@ray_streaming_maven//:de_javakaffee_kryo_serializers",
        "@ray_streaming_maven//:org_apache_commons_commons_lang3",
        "@ray_streaming_maven//:org_mockito_mockito_all",
        "@ray_streaming_maven//:org_aeonbits_owner_owner",
        "@ray_streaming_maven//:org_objenesis_objenesis",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":io_ray_ray_streaming-common",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:de_ruedigermoeller_fst",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_slf4j_slf4j_api",
        "@ray_streaming_maven//:com_esotericsoftware_kryo",
        "@ray_streaming_maven//:com_esotericsoftware_minlog_minlog",
        "@ray_streaming_maven//:com_esotericsoftware_reflectasm_reflectasm",
        "@ray_streaming_maven//:de_javakaffee_kryo_serializers",
        "@ray_streaming_maven//:org_apache_commons_commons_lang3",
        "@ray_streaming_maven//:org_aeonbits_owner_owner",
        "@ray_streaming_maven//:org_objenesis_objenesis",
    ],
)

native_java_library("streaming-runtime", "streaming_java", "@com_github_ray_streaming//:libstreaming_java.so")

filegroup(
    name = "java_native_deps",
    srcs = [":streaming_java"],
)

define_java_module(
    name = "streaming-runtime",
    additional_resources = [
        ":java_native_deps",
    ],
    additional_srcs = [
        ":all_java_proto",
    ],
    define_test_lib = True,
    exclude_srcs = [
        "streaming-runtime/src/main/java/io/ray/streaming/runtime/generated/*.java",
    ],
    test_deps = [
        ":io_ray_ray_streaming-common",
        ":io_ray_ray_streaming-state",
        ":io_ray_ray_streaming-api",
        ":io_ray_ray_streaming-runtime",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:de_ruedigermoeller_fst",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_slf4j_slf4j_api",
        "@maven//:org_testng_testng",
        "@maven//:org_yaml_snakeyaml",
        "@ray_streaming_maven//:com_google_code_findbugs_jsr305",
        "@ray_streaming_maven//:com_google_code_gson_gson",
        "@ray_streaming_maven//:org_aeonbits_owner_owner",
        "@ray_streaming_maven//:org_apache_commons_commons_lang3",
        "@ray_streaming_maven//:org_mockito_mockito_all",
        "@ray_streaming_maven//:org_powermock_powermock_api_mockito",
        "@ray_streaming_maven//:org_powermock_powermock_module_testng",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_ray_project_ray//java:io_ray_ray_api",
        "@com_github_ray_project_ray//java:io_ray_ray_runtime",
        ":io_ray_ray_streaming-common",
        ":io_ray_ray_streaming-api",
        ":io_ray_ray_streaming-state",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@maven//:com_google_protobuf_protobuf_java",
        "@maven//:commons_io_commons_io",
        "@maven//:de_ruedigermoeller_fst",
	      "@maven//:net_java_dev_jna_jna",
        "@maven//:org_apache_commons_commons_lang3",
        "@maven//:org_apache_logging_log4j_log4j_api",
        "@maven//:org_apache_logging_log4j_log4j_core",
        "@maven//:org_apache_logging_log4j_log4j_slf4j_impl",
        "@maven//:org_msgpack_msgpack_core",
        "@maven//:org_slf4j_slf4j_api",
        "@ray_streaming_maven//:com_github_davidmoten_flatbuffers_java",
        "@ray_streaming_maven//:com_google_code_findbugs_jsr305",
        "@ray_streaming_maven//:com_google_code_gson_gson",
        "@ray_streaming_maven//:commons_collections_commons_collections",
        "@ray_streaming_maven//:org_aeonbits_owner_owner",
    ],
)

java_binary(
    name = "all_streaming_tests",
    args = ["streaming/java/testng.xml"],
    data = ["testng.xml"],
    main_class = "org.testng.TestNG",
    runtime_deps = [
        ":io_ray_ray_streaming-common_test",
        ":io_ray_ray_streaming-api_test",
        ":io_ray_ray_streaming-runtime",
        ":io_ray_ray_streaming-runtime_test",
        ":io_ray_ray_streaming-state",
        "@com_github_ray_project_ray//java:io_ray_ray_api",
        "@maven//:org_testng_testng",
        "@maven//:org_yaml_snakeyaml",
        "@ray_streaming_maven//:org_mockito_mockito_all",
        "@ray_streaming_maven//:org_powermock_powermock_api_mockito",
        "@ray_streaming_maven//:org_powermock_powermock_module_testng",
    ],
)

# proto buffer
java_proto_compile(
    name = "streaming_java_proto",
    deps = ["@com_github_ray_streaming//:streaming_proto"],
)

java_proto_compile(
    name = "remote_call_java_proto",
    deps = ["@com_github_ray_streaming//:remote_call_proto"],
)

filegroup(
    name = "all_java_proto",
    srcs = [
        ":remote_call_java_proto",
        ":streaming_java_proto",
    ],
)

genrule(
    name = "streaming_copy_pom_file",
    srcs = [
        "@com_github_ray_streaming//java:io_ray_ray_" + module + "_pom"
        for module in all_modules
    ],
    outs = ["streaming_copy_pom_file.out"],
    cmd = """
        WORK_DIR="$$(pwd)"
        cp -f $(location @com_github_ray_streaming//java:io_ray_ray_streaming-common_pom) "$$WORK_DIR/java/streaming-common/pom.xml"
        cp -f $(location @com_github_ray_streaming//java:io_ray_ray_streaming-api_pom) "$$WORK_DIR/java/streaming-api/pom.xml"
        cp -f $(location @com_github_ray_streaming//java:io_ray_ray_streaming-runtime_pom) "$$WORK_DIR/java/streaming-runtime/pom.xml"
        cp -f $(location @com_github_ray_streaming//java:io_ray_ray_streaming-state_pom) "$$WORK_DIR/java/streaming-state/pom.xml"
        date > $@
    """,
    local = 1,
    tags = ["no-cache"],
)

genrule(
    name = "cp_java_generated",
    srcs = [
        ":all_java_proto",
        ":streaming_copy_pom_file",
    ],
    outs = ["cp_java_generated.out"],
    cmd = """
        WORK_DIR="$$(pwd)"
        GENERATED_DIR="$$WORK_DIR/java/streaming-runtime/src/main/java/io/ray/streaming/runtime/generated"
        rm -rf "$$GENERATED_DIR"
        mkdir -p "$$GENERATED_DIR"
        # Copy protobuf-generated files.
        for f in $(locations @com_github_ray_streaming//java:all_java_proto); do
            unzip -q -o "$$f" -x META-INF/MANIFEST.MF -d "$$WORK_DIR/java/streaming-runtime/src/main/java"
        done
        # remove third party protobuf
        rm -rf $$WORK_DIR/java/streaming-runtime/src/main/java/com/google/protobuf/
        date > $@
    """,
    local = 1,
    tags = ["no-cache"],
)

# Generates the dependencies needed by maven.
genrule(
    name = "gen_maven_deps",
    srcs = [
        ":java_native_deps",
        ":cp_java_generated",
    ],
    outs = ["gen_maven_deps.out"],
    cmd = """
        WORK_DIR="$${PWD}"
        # Copy native dependencies.
        OS_NAME=""
        case "$${OSTYPE}" in
          linux*) OS_NAME="linux";;
          darwin*) OS_NAME="darwin";;
          *) echo "$${OSTYPE} is not supported currently"; exit 1;;
        esac
        NATIVE_DEPS_DIR="$$WORK_DIR/java/streaming-runtime/native_dependencies/native/$$OS_NAME"
        rm -rf "$$NATIVE_DEPS_DIR"
        mkdir -p "$$NATIVE_DEPS_DIR"
        for f in $(locations @com_github_ray_streaming//java:java_native_deps); do
            chmod +w "$$f"
            cp "$$f" "$$NATIVE_DEPS_DIR"
        done
        date > $@
    """,
    local = 1,
    tags = ["no-cache"],
    visibility = ["//visibility:public"],
)

java_binary(
    name = "streaming_dist",
    # This rule is used to package all Ray Java code and the third-party dependencies into a
    # fat jar file. It's not really an executable jar. So we set its `main_class` to empty.
    main_class = "",
    runtime_deps = [
        "//java:io_ray_ray_streaming-common",
        "//java:io_ray_ray_streaming-api",
        "//java:io_ray_ray_streaming-state",
        "//java:io_ray_ray_streaming-runtime",
    ],
)

jar_jar(
    name = "streaming_dist_shaded",
    input_jar = "//java:streaming_dist_deploy.jar",
    rules = "//java:shade_rule",
)

genrule(
    name = "streaming_java_pkg",
    srcs = [
        ":gen_maven_deps",
        ":streaming_dist_shaded",
    ],
    outs = ["streaming_java_pkg.out"],
    cmd = """
        WORK_DIR="$$(pwd)"
        rm -rf "$$WORK_DIR/python/raystreaming/jars" && mkdir -p "$$WORK_DIR/python/raystreaming/jars"
        cp -f $(location //java:streaming_dist_shaded) "$$WORK_DIR/python/raystreaming/jars/raystreaming_dist.jar"
        date > $@
    """,
    local = 1,
    tags = ["no-cache"],
)
