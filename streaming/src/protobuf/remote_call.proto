syntax = "proto3";

package ray.streaming.proto;

import "protobuf/streaming.proto";

import "google/protobuf/any.proto";

option java_package = "io.ray.streaming.runtime.generated";

// Execution vertex info, including it's upstream and downstream
message ExecutionVertexContext {
  // An edge between 2 execution vertices
  message ExecutionEdge {

    // upstream execution vertex id
    int32 source_execution_vertex_id = 1;

    // downstream execution vertex id
    int32 target_execution_vertex_id = 2;

    //original source operator id
    int32 original_src_operator_id = 3;

    // serialized partition between source/target vertex
    bytes partition = 4;

    //if the edge is cyclic
    bool cyclic = 5;
  }

  message ExecutionVertex {
    // unique id of execution vertex
    int32 execution_vertex_id = 1;
    // unique id of execution job vertex
    int32 execution_job_vertex_id = 2;
    // name of execution job vertex, e.g. 1-SourceOperator
    string execution_job_vertex_name = 3;
    // index of execution vertex
    int32 execution_vertex_index = 4;
    int32 parallelism = 5;
    // serialized operator
    bytes operator = 6;
    bool chained = 7;
    bytes worker_actor = 8;
    string container_id = 9;
    uint64 build_time = 10;
    Language language = 11;
    map<string, string> config = 12;
    map<string, double> resource = 13;
  }

  // vertices
  ExecutionVertex current_execution_vertex = 1;
  repeated ExecutionVertex upstream_execution_vertices = 2;
  repeated ExecutionVertex downstream_execution_vertices = 3;

  // edges
  repeated ExecutionEdge input_execution_edges = 4;
  repeated ExecutionEdge output_execution_edges = 5;
}

// Streaming python worker context
message PythonJobWorkerContext {
    // worker id
    string worker_id = 1;

    // serialized master actor handle
    bytes master_actor = 2;

    // vertex including it's upstream and downstream
    ExecutionVertexContext execution_vertex_context = 3;

    // vertex changing state
    bool is_changed = 4;

    // role in change sub dag
    NodeType role_in_changed_sub_dag = 5;
}

message ActorId {
  bytes id = 1;
}

message ActorHandle {
  bool from_java = 1;
  bytes actor_handle = 2;
}

message BoolResult {
  bool boolRes = 1;
}

message Barrier {
  int64 id = 1;
}

message CheckpointId {
  int64 checkpoint_id = 1;
}

message BaseWorkerCmd {
  bytes actor_id = 1;  // actor id
  int64 timestamp = 2;
  google.protobuf.Any detail = 3;
}

message WorkerCommitReport {
  int64 commit_checkpoint_id = 1;
}

message WorkerRollbackRequest {
  string exception_msg = 1;
  string worker_hostname = 2;
  string worker_pid = 3;
}

message CallResult {
  bool success = 1;
  int32 result_code = 2;
  string result_msg = 3;
  QueueRecoverInfo result_obj = 4;
}

message QueueRecoverInfo {
  enum QueueCreationStatus {
    FreshStarted = 0;
    PullOk = 1;
    Timeout = 2;
    DataLost = 3;
  }
  map<string, QueueCreationStatus> creation_status = 3;
}

message JobWorkerContext {
  string job_name = 1;
  string op_name = 2;
  string worker_name = 3;
  ActorHandle master = 4;
  ActorId worker_id = 5;
  map<string, string> conf = 6;
  map<string, ActorHandle> input_queue_actor = 7;
  map<string, ActorHandle> output_queue_actor = 8;
  bool is_changed = 9;
  ExecutionVertexState worker_state = 10;
  int64 id = 11;
}

enum ExecutionVertexState {
  TO_ADD = 0;
  TO_ADD_RELATED = 1;
  TO_DEL = 2;
  TO_DEL_RELATED = 3;
  TO_UPDATE = 4;
  RUNNING = 5;
  UNKNOWN_STATE = 6;
}

